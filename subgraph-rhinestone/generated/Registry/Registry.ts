// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Attested extends ethereum.Event {
  get params(): Attested__Params {
    return new Attested__Params(this);
  }
}

export class Attested__Params {
  _event: Attested;

  constructor(event: Attested) {
    this._event = event;
  }

  get subject(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get attester(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get schema(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get dataPointer(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ModuleDeployed extends ethereum.Event {
  get params(): ModuleDeployed__Params {
    return new ModuleDeployed__Params(this);
  }
}

export class ModuleDeployed__Params {
  _event: ModuleDeployed;

  constructor(event: ModuleDeployed) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get salt(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get resolver(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ModuleDeployedExternalFactory extends ethereum.Event {
  get params(): ModuleDeployedExternalFactory__Params {
    return new ModuleDeployedExternalFactory__Params(this);
  }
}

export class ModuleDeployedExternalFactory__Params {
  _event: ModuleDeployedExternalFactory;

  constructor(event: ModuleDeployedExternalFactory) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get factory(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get resolver(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ModuleRegistration extends ethereum.Event {
  get params(): ModuleRegistration__Params {
    return new ModuleRegistration__Params(this);
  }
}

export class ModuleRegistration__Params {
  _event: ModuleRegistration;

  constructor(event: ModuleRegistration) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get resolver(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class NewSchemaResolver extends ethereum.Event {
  get params(): NewSchemaResolver__Params {
    return new NewSchemaResolver__Params(this);
  }
}

export class NewSchemaResolver__Params {
  _event: NewSchemaResolver;

  constructor(event: NewSchemaResolver) {
    this._event = event;
  }

  get uid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get resolver(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Revoked extends ethereum.Event {
  get params(): Revoked__Params {
    return new Revoked__Params(this);
  }
}

export class Revoked__Params {
  _event: Revoked;

  constructor(event: Revoked) {
    this._event = event;
  }

  get subject(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get revoker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get schema(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RevokedOffchain extends ethereum.Event {
  get params(): RevokedOffchain__Params {
    return new RevokedOffchain__Params(this);
  }
}

export class RevokedOffchain__Params {
  _event: RevokedOffchain;

  constructor(event: RevokedOffchain) {
    this._event = event;
  }

  get revoker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SchemaRegistered extends ethereum.Event {
  get params(): SchemaRegistered__Params {
    return new SchemaRegistered__Params(this);
  }
}

export class SchemaRegistered__Params {
  _event: SchemaRegistered;

  constructor(event: SchemaRegistered) {
    this._event = event;
  }

  get uid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get registerer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SchemaResolverRegistered extends ethereum.Event {
  get params(): SchemaResolverRegistered__Params {
    return new SchemaResolverRegistered__Params(this);
  }
}

export class SchemaResolverRegistered__Params {
  _event: SchemaResolverRegistered;

  constructor(event: SchemaResolverRegistered) {
    this._event = event;
  }

  get uid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get registerer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Timestamped extends ethereum.Event {
  get params(): Timestamped__Params {
    return new Timestamped__Params(this);
  }
}

export class Timestamped__Params {
  _event: Timestamped;

  constructor(event: Timestamped) {
    this._event = event;
  }

  get data(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Registry__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class Registry__findAttestationResultAttestationStruct extends ethereum.Tuple {
  get time(): BigInt {
    return this[0].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[1].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[2].toBigInt();
  }

  get schemaUID(): Bytes {
    return this[3].toBytes();
  }

  get subject(): Address {
    return this[4].toAddress();
  }

  get attester(): Address {
    return this[5].toAddress();
  }

  get dataPointer(): Address {
    return this[6].toAddress();
  }
}

export class Registry__findAttestationsResultAttestationsStruct extends ethereum.Tuple {
  get time(): BigInt {
    return this[0].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[1].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[2].toBigInt();
  }

  get schemaUID(): Bytes {
    return this[3].toBytes();
  }

  get subject(): Address {
    return this[4].toAddress();
  }

  get attester(): Address {
    return this[5].toAddress();
  }

  get dataPointer(): Address {
    return this[6].toAddress();
  }
}

export class Registry__getAttestationDigestInputAttDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get expirationTime(): BigInt {
    return this[1].toBigInt();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class Registry__getAttestationDigest1InputAttDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get expirationTime(): BigInt {
    return this[1].toBigInt();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class Registry__getModuleResultValue0Struct extends ethereum.Tuple {
  get resolverUID(): Bytes {
    return this[0].toBytes();
  }

  get implementation(): Address {
    return this[1].toAddress();
  }

  get sender(): Address {
    return this[2].toAddress();
  }

  get metadata(): Bytes {
    return this[3].toBytes();
  }
}

export class Registry__getResolverResultValue0Struct extends ethereum.Tuple {
  get resolver(): Address {
    return this[0].toAddress();
  }

  get resolverOwner(): Address {
    return this[1].toAddress();
  }
}

export class Registry__getRevocationDigestInputRevDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get attester(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }
}

export class Registry__getRevocationDigest1InputRevDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get attester(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }
}

export class Registry__getSchemaResultValue0Struct extends ethereum.Tuple {
  get registeredAt(): BigInt {
    return this[0].toBigInt();
  }

  get validator(): Address {
    return this[1].toAddress();
  }

  get schema(): string {
    return this[2].toString();
  }
}

export class Registry extends ethereum.SmartContract {
  static bind(address: Address): Registry {
    return new Registry("Registry", address);
  }

  check(module: Address, attester: Address): BigInt {
    let result = super.call("check", "check(address,address):(uint256)", [
      ethereum.Value.fromAddress(module),
      ethereum.Value.fromAddress(attester)
    ]);

    return result[0].toBigInt();
  }

  try_check(module: Address, attester: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("check", "check(address,address):(uint256)", [
      ethereum.Value.fromAddress(module),
      ethereum.Value.fromAddress(attester)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkN(
    module: Address,
    attesters: Array<Address>,
    threshold: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "checkN",
      "checkN(address,address[],uint256):(uint256[])",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromAddressArray(attesters),
        ethereum.Value.fromUnsignedBigInt(threshold)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_checkN(
    module: Address,
    attesters: Array<Address>,
    threshold: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "checkN",
      "checkN(address,address[],uint256):(uint256[])",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromAddressArray(attesters),
        ethereum.Value.fromUnsignedBigInt(threshold)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  checkNUnsafe(
    module: Address,
    attesters: Array<Address>,
    threshold: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "checkNUnsafe",
      "checkNUnsafe(address,address[],uint256):(uint256[])",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromAddressArray(attesters),
        ethereum.Value.fromUnsignedBigInt(threshold)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_checkNUnsafe(
    module: Address,
    attesters: Array<Address>,
    threshold: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "checkNUnsafe",
      "checkNUnsafe(address,address[],uint256):(uint256[])",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromAddressArray(attesters),
        ethereum.Value.fromUnsignedBigInt(threshold)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  eip712Domain(): Registry__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );

    return new Registry__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray()
    );
  }

  try_eip712Domain(): ethereum.CallResult<Registry__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Registry__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray()
      )
    );
  }

  findAttestation(
    module: Address,
    attesters: Address
  ): Registry__findAttestationResultAttestationStruct {
    let result = super.call(
      "findAttestation",
      "findAttestation(address,address):((uint48,uint48,uint48,bytes32,address,address,address))",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromAddress(attesters)
      ]
    );

    return changetype<Registry__findAttestationResultAttestationStruct>(
      result[0].toTuple()
    );
  }

  try_findAttestation(
    module: Address,
    attesters: Address
  ): ethereum.CallResult<Registry__findAttestationResultAttestationStruct> {
    let result = super.tryCall(
      "findAttestation",
      "findAttestation(address,address):((uint48,uint48,uint48,bytes32,address,address,address))",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromAddress(attesters)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Registry__findAttestationResultAttestationStruct>(
        value[0].toTuple()
      )
    );
  }

  findAttestations(
    module: Address,
    attesters: Array<Address>
  ): Array<Registry__findAttestationsResultAttestationsStruct> {
    let result = super.call(
      "findAttestations",
      "findAttestations(address,address[]):((uint48,uint48,uint48,bytes32,address,address,address)[])",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromAddressArray(attesters)
      ]
    );

    return result[0].toTupleArray<
      Registry__findAttestationsResultAttestationsStruct
    >();
  }

  try_findAttestations(
    module: Address,
    attesters: Array<Address>
  ): ethereum.CallResult<
    Array<Registry__findAttestationsResultAttestationsStruct>
  > {
    let result = super.tryCall(
      "findAttestations",
      "findAttestations(address,address[]):((uint48,uint48,uint48,bytes32,address,address,address)[])",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromAddressArray(attesters)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Registry__findAttestationsResultAttestationsStruct
      >()
    );
  }

  getAttestTypeHash(): Bytes {
    let result = super.call(
      "getAttestTypeHash",
      "getAttestTypeHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getAttestTypeHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getAttestTypeHash",
      "getAttestTypeHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAttestationDigest(
    attData: Registry__getAttestationDigestInputAttDataStruct,
    schemaUID: Bytes,
    nonce: BigInt
  ): Bytes {
    let result = super.call(
      "getAttestationDigest",
      "getAttestationDigest((address,uint48,uint256,bytes),bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromTuple(attData),
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );

    return result[0].toBytes();
  }

  try_getAttestationDigest(
    attData: Registry__getAttestationDigestInputAttDataStruct,
    schemaUID: Bytes,
    nonce: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getAttestationDigest",
      "getAttestationDigest((address,uint48,uint256,bytes),bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromTuple(attData),
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAttestationDigest1(
    attData: Registry__getAttestationDigest1InputAttDataStruct,
    schemaUID: Bytes,
    attester: Address
  ): Bytes {
    let result = super.call(
      "getAttestationDigest",
      "getAttestationDigest((address,uint48,uint256,bytes),bytes32,address):(bytes32)",
      [
        ethereum.Value.fromTuple(attData),
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromAddress(attester)
      ]
    );

    return result[0].toBytes();
  }

  try_getAttestationDigest1(
    attData: Registry__getAttestationDigest1InputAttDataStruct,
    schemaUID: Bytes,
    attester: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getAttestationDigest",
      "getAttestationDigest((address,uint48,uint256,bytes),bytes32,address):(bytes32)",
      [
        ethereum.Value.fromTuple(attData),
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromAddress(attester)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getDomainSeparator(): Bytes {
    let result = super.call(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getModule(moduleAddress: Address): Registry__getModuleResultValue0Struct {
    let result = super.call(
      "getModule",
      "getModule(address):((bytes32,address,address,bytes))",
      [ethereum.Value.fromAddress(moduleAddress)]
    );

    return changetype<Registry__getModuleResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getModule(
    moduleAddress: Address
  ): ethereum.CallResult<Registry__getModuleResultValue0Struct> {
    let result = super.tryCall(
      "getModule",
      "getModule(address):((bytes32,address,address,bytes))",
      [ethereum.Value.fromAddress(moduleAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Registry__getModuleResultValue0Struct>(value[0].toTuple())
    );
  }

  getNonce(account: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getResolver(uid: Bytes): Registry__getResolverResultValue0Struct {
    let result = super.call(
      "getResolver",
      "getResolver(bytes32):((address,address))",
      [ethereum.Value.fromFixedBytes(uid)]
    );

    return changetype<Registry__getResolverResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getResolver(
    uid: Bytes
  ): ethereum.CallResult<Registry__getResolverResultValue0Struct> {
    let result = super.tryCall(
      "getResolver",
      "getResolver(bytes32):((address,address))",
      [ethereum.Value.fromFixedBytes(uid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Registry__getResolverResultValue0Struct>(value[0].toTuple())
    );
  }

  getRevocationDigest(
    revData: Registry__getRevocationDigestInputRevDataStruct,
    schemaUID: Bytes,
    revoker: Address
  ): Bytes {
    let result = super.call(
      "getRevocationDigest",
      "getRevocationDigest((address,address,uint256),bytes32,address):(bytes32)",
      [
        ethereum.Value.fromTuple(revData),
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromAddress(revoker)
      ]
    );

    return result[0].toBytes();
  }

  try_getRevocationDigest(
    revData: Registry__getRevocationDigestInputRevDataStruct,
    schemaUID: Bytes,
    revoker: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRevocationDigest",
      "getRevocationDigest((address,address,uint256),bytes32,address):(bytes32)",
      [
        ethereum.Value.fromTuple(revData),
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromAddress(revoker)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRevocationDigest1(
    revData: Registry__getRevocationDigest1InputRevDataStruct,
    schemaUID: Bytes,
    nonce: BigInt
  ): Bytes {
    let result = super.call(
      "getRevocationDigest",
      "getRevocationDigest((address,address,uint256),bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromTuple(revData),
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );

    return result[0].toBytes();
  }

  try_getRevocationDigest1(
    revData: Registry__getRevocationDigest1InputRevDataStruct,
    schemaUID: Bytes,
    nonce: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRevocationDigest",
      "getRevocationDigest((address,address,uint256),bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromTuple(revData),
        ethereum.Value.fromFixedBytes(schemaUID),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRevokeTypeHash(): Bytes {
    let result = super.call(
      "getRevokeTypeHash",
      "getRevokeTypeHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getRevokeTypeHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRevokeTypeHash",
      "getRevokeTypeHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSchema(uid: Bytes): Registry__getSchemaResultValue0Struct {
    let result = super.call(
      "getSchema",
      "getSchema(bytes32):((uint48,address,string))",
      [ethereum.Value.fromFixedBytes(uid)]
    );

    return changetype<Registry__getSchemaResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSchema(
    uid: Bytes
  ): ethereum.CallResult<Registry__getSchemaResultValue0Struct> {
    let result = super.tryCall(
      "getSchema",
      "getSchema(bytes32):((uint48,address,string))",
      [ethereum.Value.fromFixedBytes(uid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Registry__getSchemaResultValue0Struct>(value[0].toTuple())
    );
  }

  registerResolver(_resolver: Address): Bytes {
    let result = super.call(
      "registerResolver",
      "registerResolver(address):(bytes32)",
      [ethereum.Value.fromAddress(_resolver)]
    );

    return result[0].toBytes();
  }

  try_registerResolver(_resolver: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "registerResolver",
      "registerResolver(address):(bytes32)",
      [ethereum.Value.fromAddress(_resolver)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  registerSchema(schema: string, validator: Address): Bytes {
    let result = super.call(
      "registerSchema",
      "registerSchema(string,address):(bytes32)",
      [ethereum.Value.fromString(schema), ethereum.Value.fromAddress(validator)]
    );

    return result[0].toBytes();
  }

  try_registerSchema(
    schema: string,
    validator: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "registerSchema",
      "registerSchema(string,address):(bytes32)",
      [ethereum.Value.fromString(schema), ethereum.Value.fromAddress(validator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AttestCall extends ethereum.Call {
  get inputs(): AttestCall__Inputs {
    return new AttestCall__Inputs(this);
  }

  get outputs(): AttestCall__Outputs {
    return new AttestCall__Outputs(this);
  }
}

export class AttestCall__Inputs {
  _call: AttestCall;

  constructor(call: AttestCall) {
    this._call = call;
  }

  get request(): AttestCallRequestStruct {
    return changetype<AttestCallRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AttestCall__Outputs {
  _call: AttestCall;

  constructor(call: AttestCall) {
    this._call = call;
  }
}

export class AttestCallRequestStruct extends ethereum.Tuple {
  get schemaUID(): Bytes {
    return this[0].toBytes();
  }

  get data(): AttestCallRequestDataStruct {
    return changetype<AttestCallRequestDataStruct>(this[1].toTuple());
  }
}

export class AttestCallRequestDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get expirationTime(): BigInt {
    return this[1].toBigInt();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class Attest1Call extends ethereum.Call {
  get inputs(): Attest1Call__Inputs {
    return new Attest1Call__Inputs(this);
  }

  get outputs(): Attest1Call__Outputs {
    return new Attest1Call__Outputs(this);
  }
}

export class Attest1Call__Inputs {
  _call: Attest1Call;

  constructor(call: Attest1Call) {
    this._call = call;
  }

  get delegatedRequest(): Attest1CallDelegatedRequestStruct {
    return changetype<Attest1CallDelegatedRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class Attest1Call__Outputs {
  _call: Attest1Call;

  constructor(call: Attest1Call) {
    this._call = call;
  }
}

export class Attest1CallDelegatedRequestStruct extends ethereum.Tuple {
  get schemaUID(): Bytes {
    return this[0].toBytes();
  }

  get data(): Attest1CallDelegatedRequestDataStruct {
    return changetype<Attest1CallDelegatedRequestDataStruct>(this[1].toTuple());
  }

  get attester(): Address {
    return this[2].toAddress();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class Attest1CallDelegatedRequestDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get expirationTime(): BigInt {
    return this[1].toBigInt();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get code(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get deployParams(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get salt(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get metadata(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get resolverUID(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get moduleAddr(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployC3Call extends ethereum.Call {
  get inputs(): DeployC3Call__Inputs {
    return new DeployC3Call__Inputs(this);
  }

  get outputs(): DeployC3Call__Outputs {
    return new DeployC3Call__Outputs(this);
  }
}

export class DeployC3Call__Inputs {
  _call: DeployC3Call;

  constructor(call: DeployC3Call) {
    this._call = call;
  }

  get code(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get deployParams(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get salt(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get metadata(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get resolverUID(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DeployC3Call__Outputs {
  _call: DeployC3Call;

  constructor(call: DeployC3Call) {
    this._call = call;
  }

  get moduleAddr(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployViaFactoryCall extends ethereum.Call {
  get inputs(): DeployViaFactoryCall__Inputs {
    return new DeployViaFactoryCall__Inputs(this);
  }

  get outputs(): DeployViaFactoryCall__Outputs {
    return new DeployViaFactoryCall__Outputs(this);
  }
}

export class DeployViaFactoryCall__Inputs {
  _call: DeployViaFactoryCall;

  constructor(call: DeployViaFactoryCall) {
    this._call = call;
  }

  get factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get callOnFactory(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get metadata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get resolverUID(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DeployViaFactoryCall__Outputs {
  _call: DeployViaFactoryCall;

  constructor(call: DeployViaFactoryCall) {
    this._call = call;
  }

  get moduleAddr(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MultiAttestCall extends ethereum.Call {
  get inputs(): MultiAttestCall__Inputs {
    return new MultiAttestCall__Inputs(this);
  }

  get outputs(): MultiAttestCall__Outputs {
    return new MultiAttestCall__Outputs(this);
  }
}

export class MultiAttestCall__Inputs {
  _call: MultiAttestCall;

  constructor(call: MultiAttestCall) {
    this._call = call;
  }

  get multiDelegatedRequests(): Array<
    MultiAttestCallMultiDelegatedRequestsStruct
  > {
    return this._call.inputValues[0].value.toTupleArray<
      MultiAttestCallMultiDelegatedRequestsStruct
    >();
  }
}

export class MultiAttestCall__Outputs {
  _call: MultiAttestCall;

  constructor(call: MultiAttestCall) {
    this._call = call;
  }
}

export class MultiAttestCallMultiDelegatedRequestsStruct extends ethereum.Tuple {
  get schemaUID(): Bytes {
    return this[0].toBytes();
  }

  get data(): Array<MultiAttestCallMultiDelegatedRequestsDataStruct> {
    return this[1].toTupleArray<
      MultiAttestCallMultiDelegatedRequestsDataStruct
    >();
  }

  get signatures(): Array<Bytes> {
    return this[2].toBytesArray();
  }

  get attester(): Address {
    return this[3].toAddress();
  }
}

export class MultiAttestCallMultiDelegatedRequestsDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get expirationTime(): BigInt {
    return this[1].toBigInt();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class MultiAttest1Call extends ethereum.Call {
  get inputs(): MultiAttest1Call__Inputs {
    return new MultiAttest1Call__Inputs(this);
  }

  get outputs(): MultiAttest1Call__Outputs {
    return new MultiAttest1Call__Outputs(this);
  }
}

export class MultiAttest1Call__Inputs {
  _call: MultiAttest1Call;

  constructor(call: MultiAttest1Call) {
    this._call = call;
  }

  get multiRequests(): Array<MultiAttest1CallMultiRequestsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MultiAttest1CallMultiRequestsStruct
    >();
  }
}

export class MultiAttest1Call__Outputs {
  _call: MultiAttest1Call;

  constructor(call: MultiAttest1Call) {
    this._call = call;
  }
}

export class MultiAttest1CallMultiRequestsStruct extends ethereum.Tuple {
  get schemaUID(): Bytes {
    return this[0].toBytes();
  }

  get data(): Array<MultiAttest1CallMultiRequestsDataStruct> {
    return this[1].toTupleArray<MultiAttest1CallMultiRequestsDataStruct>();
  }
}

export class MultiAttest1CallMultiRequestsDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get expirationTime(): BigInt {
    return this[1].toBigInt();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class MultiRevokeCall extends ethereum.Call {
  get inputs(): MultiRevokeCall__Inputs {
    return new MultiRevokeCall__Inputs(this);
  }

  get outputs(): MultiRevokeCall__Outputs {
    return new MultiRevokeCall__Outputs(this);
  }
}

export class MultiRevokeCall__Inputs {
  _call: MultiRevokeCall;

  constructor(call: MultiRevokeCall) {
    this._call = call;
  }

  get multiDelegatedRequests(): Array<
    MultiRevokeCallMultiDelegatedRequestsStruct
  > {
    return this._call.inputValues[0].value.toTupleArray<
      MultiRevokeCallMultiDelegatedRequestsStruct
    >();
  }
}

export class MultiRevokeCall__Outputs {
  _call: MultiRevokeCall;

  constructor(call: MultiRevokeCall) {
    this._call = call;
  }
}

export class MultiRevokeCallMultiDelegatedRequestsStruct extends ethereum.Tuple {
  get schemaUID(): Bytes {
    return this[0].toBytes();
  }

  get data(): Array<MultiRevokeCallMultiDelegatedRequestsDataStruct> {
    return this[1].toTupleArray<
      MultiRevokeCallMultiDelegatedRequestsDataStruct
    >();
  }

  get revoker(): Address {
    return this[2].toAddress();
  }

  get signatures(): Array<Bytes> {
    return this[3].toBytesArray();
  }
}

export class MultiRevokeCallMultiDelegatedRequestsDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get attester(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }
}

export class MultiRevoke1Call extends ethereum.Call {
  get inputs(): MultiRevoke1Call__Inputs {
    return new MultiRevoke1Call__Inputs(this);
  }

  get outputs(): MultiRevoke1Call__Outputs {
    return new MultiRevoke1Call__Outputs(this);
  }
}

export class MultiRevoke1Call__Inputs {
  _call: MultiRevoke1Call;

  constructor(call: MultiRevoke1Call) {
    this._call = call;
  }

  get multiRequests(): Array<MultiRevoke1CallMultiRequestsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MultiRevoke1CallMultiRequestsStruct
    >();
  }
}

export class MultiRevoke1Call__Outputs {
  _call: MultiRevoke1Call;

  constructor(call: MultiRevoke1Call) {
    this._call = call;
  }
}

export class MultiRevoke1CallMultiRequestsStruct extends ethereum.Tuple {
  get schemaUID(): Bytes {
    return this[0].toBytes();
  }

  get data(): Array<MultiRevoke1CallMultiRequestsDataStruct> {
    return this[1].toTupleArray<MultiRevoke1CallMultiRequestsDataStruct>();
  }
}

export class MultiRevoke1CallMultiRequestsDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get attester(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get resolverUID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get moduleAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get metadata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class RegisterResolverCall extends ethereum.Call {
  get inputs(): RegisterResolverCall__Inputs {
    return new RegisterResolverCall__Inputs(this);
  }

  get outputs(): RegisterResolverCall__Outputs {
    return new RegisterResolverCall__Outputs(this);
  }
}

export class RegisterResolverCall__Inputs {
  _call: RegisterResolverCall;

  constructor(call: RegisterResolverCall) {
    this._call = call;
  }

  get _resolver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterResolverCall__Outputs {
  _call: RegisterResolverCall;

  constructor(call: RegisterResolverCall) {
    this._call = call;
  }

  get uid(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RegisterSchemaCall extends ethereum.Call {
  get inputs(): RegisterSchemaCall__Inputs {
    return new RegisterSchemaCall__Inputs(this);
  }

  get outputs(): RegisterSchemaCall__Outputs {
    return new RegisterSchemaCall__Outputs(this);
  }
}

export class RegisterSchemaCall__Inputs {
  _call: RegisterSchemaCall;

  constructor(call: RegisterSchemaCall) {
    this._call = call;
  }

  get schema(): string {
    return this._call.inputValues[0].value.toString();
  }

  get validator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterSchemaCall__Outputs {
  _call: RegisterSchemaCall;

  constructor(call: RegisterSchemaCall) {
    this._call = call;
  }

  get uid(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get request(): RevokeCallRequestStruct {
    return changetype<RevokeCallRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class RevokeCallRequestStruct extends ethereum.Tuple {
  get schemaUID(): Bytes {
    return this[0].toBytes();
  }

  get data(): RevokeCallRequestDataStruct {
    return changetype<RevokeCallRequestDataStruct>(this[1].toTuple());
  }

  get revoker(): Address {
    return this[2].toAddress();
  }

  get signature(): Bytes {
    return this[3].toBytes();
  }
}

export class RevokeCallRequestDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get attester(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }
}

export class Revoke1Call extends ethereum.Call {
  get inputs(): Revoke1Call__Inputs {
    return new Revoke1Call__Inputs(this);
  }

  get outputs(): Revoke1Call__Outputs {
    return new Revoke1Call__Outputs(this);
  }
}

export class Revoke1Call__Inputs {
  _call: Revoke1Call;

  constructor(call: Revoke1Call) {
    this._call = call;
  }

  get request(): Revoke1CallRequestStruct {
    return changetype<Revoke1CallRequestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class Revoke1Call__Outputs {
  _call: Revoke1Call;

  constructor(call: Revoke1Call) {
    this._call = call;
  }
}

export class Revoke1CallRequestStruct extends ethereum.Tuple {
  get schemaUID(): Bytes {
    return this[0].toBytes();
  }

  get data(): Revoke1CallRequestDataStruct {
    return changetype<Revoke1CallRequestDataStruct>(this[1].toTuple());
  }
}

export class Revoke1CallRequestDataStruct extends ethereum.Tuple {
  get subject(): Address {
    return this[0].toAddress();
  }

  get attester(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }
}

export class SetResolverCall extends ethereum.Call {
  get inputs(): SetResolverCall__Inputs {
    return new SetResolverCall__Inputs(this);
  }

  get outputs(): SetResolverCall__Outputs {
    return new SetResolverCall__Outputs(this);
  }
}

export class SetResolverCall__Inputs {
  _call: SetResolverCall;

  constructor(call: SetResolverCall) {
    this._call = call;
  }

  get uid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get resolver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetResolverCall__Outputs {
  _call: SetResolverCall;

  constructor(call: SetResolverCall) {
    this._call = call;
  }
}

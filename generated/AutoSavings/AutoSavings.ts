// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AutoSaveExecuted extends ethereum.Event {
  get params(): AutoSaveExecuted__Params {
    return new AutoSaveExecuted__Params(this);
  }
}

export class AutoSaveExecuted__Params {
  _event: AutoSaveExecuted;

  constructor(event: AutoSaveExecuted) {
    this._event = event;
  }

  get smartAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountReceived(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AutoSavings__getConfigResultValue0Struct extends ethereum.Tuple {
  get percentage(): i32 {
    return this[0].toI32();
  }

  get vault(): Address {
    return this[1].toAddress();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class AutoSavings extends ethereum.SmartContract {
  static bind(address: Address): AutoSavings {
    return new AutoSavings("AutoSavings", address);
  }

  calcDepositAmount(amountReceived: BigInt, percentage: BigInt): BigInt {
    let result = super.call(
      "calcDepositAmount",
      "calcDepositAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountReceived),
        ethereum.Value.fromUnsignedBigInt(percentage)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcDepositAmount(
    amountReceived: BigInt,
    percentage: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcDepositAmount",
      "calcDepositAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountReceived),
        ethereum.Value.fromUnsignedBigInt(percentage)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfig(
    account: Address,
    token: Address
  ): AutoSavings__getConfigResultValue0Struct {
    let result = super.call(
      "getConfig",
      "getConfig(address,address):((uint16,address,uint128))",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );

    return changetype<AutoSavings__getConfigResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getConfig(
    account: Address,
    token: Address
  ): ethereum.CallResult<AutoSavings__getConfigResultValue0Struct> {
    let result = super.tryCall(
      "getConfig",
      "getConfig(address,address):((uint16,address,uint128))",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AutoSavings__getConfigResultValue0Struct>(value[0].toTuple())
    );
  }

  isInitialized(smartAccount: Address): boolean {
    let result = super.call("isInitialized", "isInitialized(address):(bool)", [
      ethereum.Value.fromAddress(smartAccount)
    ]);

    return result[0].toBoolean();
  }

  try_isInitialized(smartAccount: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInitialized",
      "isInitialized(address):(bool)",
      [ethereum.Value.fromAddress(smartAccount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isModuleType(typeID: BigInt): boolean {
    let result = super.call("isModuleType", "isModuleType(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(typeID)
    ]);

    return result[0].toBoolean();
  }

  try_isModuleType(typeID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isModuleType", "isModuleType(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(typeID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  validateSessionParams(
    destinationContract: Address,
    callValue: BigInt,
    callData: Bytes,
    _sessionKeyData: Bytes,
    param4: Bytes
  ): Address {
    let result = super.call(
      "validateSessionParams",
      "validateSessionParams(address,uint256,bytes,bytes,bytes):(address)",
      [
        ethereum.Value.fromAddress(destinationContract),
        ethereum.Value.fromUnsignedBigInt(callValue),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(_sessionKeyData),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toAddress();
  }

  try_validateSessionParams(
    destinationContract: Address,
    callValue: BigInt,
    callData: Bytes,
    _sessionKeyData: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validateSessionParams",
      "validateSessionParams(address,uint256,bytes,bytes,bytes):(address)",
      [
        ethereum.Value.fromAddress(destinationContract),
        ethereum.Value.fromUnsignedBigInt(callValue),
        ethereum.Value.fromBytes(callData),
        ethereum.Value.fromBytes(_sessionKeyData),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AutoSaveCall extends ethereum.Call {
  get inputs(): AutoSaveCall__Inputs {
    return new AutoSaveCall__Inputs(this);
  }

  get outputs(): AutoSaveCall__Outputs {
    return new AutoSaveCall__Outputs(this);
  }
}

export class AutoSaveCall__Inputs {
  _call: AutoSaveCall;

  constructor(call: AutoSaveCall) {
    this._call = call;
  }

  get params(): AutoSaveCallParamsStruct {
    return changetype<AutoSaveCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AutoSaveCall__Outputs {
  _call: AutoSaveCall;

  constructor(call: AutoSaveCall) {
    this._call = call;
  }
}

export class AutoSaveCallParamsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amountReceived(): BigInt {
    return this[1].toBigInt();
  }
}

export class OnInstallCall extends ethereum.Call {
  get inputs(): OnInstallCall__Inputs {
    return new OnInstallCall__Inputs(this);
  }

  get outputs(): OnInstallCall__Outputs {
    return new OnInstallCall__Outputs(this);
  }
}

export class OnInstallCall__Inputs {
  _call: OnInstallCall;

  constructor(call: OnInstallCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class OnInstallCall__Outputs {
  _call: OnInstallCall;

  constructor(call: OnInstallCall) {
    this._call = call;
  }
}

export class OnUninstallCall extends ethereum.Call {
  get inputs(): OnUninstallCall__Inputs {
    return new OnUninstallCall__Inputs(this);
  }

  get outputs(): OnUninstallCall__Outputs {
    return new OnUninstallCall__Outputs(this);
  }
}

export class OnUninstallCall__Inputs {
  _call: OnUninstallCall;

  constructor(call: OnUninstallCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class OnUninstallCall__Outputs {
  _call: OnUninstallCall;

  constructor(call: OnUninstallCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get config(): SetConfigCallConfigStruct {
    return changetype<SetConfigCallConfigStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetConfigCallConfigStruct extends ethereum.Tuple {
  get percentage(): i32 {
    return this[0].toI32();
  }

  get vault(): Address {
    return this[1].toAddress();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class ValidateSessionParamsCall extends ethereum.Call {
  get inputs(): ValidateSessionParamsCall__Inputs {
    return new ValidateSessionParamsCall__Inputs(this);
  }

  get outputs(): ValidateSessionParamsCall__Outputs {
    return new ValidateSessionParamsCall__Outputs(this);
  }
}

export class ValidateSessionParamsCall__Inputs {
  _call: ValidateSessionParamsCall;

  constructor(call: ValidateSessionParamsCall) {
    this._call = call;
  }

  get destinationContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get callValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get callData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _sessionKeyData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ValidateSessionParamsCall__Outputs {
  _call: ValidateSessionParamsCall;

  constructor(call: ValidateSessionParamsCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
